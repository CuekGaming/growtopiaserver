/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package Enet;

public final class ENetProtocolFlag {
  public final static ENetProtocolFlag ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE = new ENetProtocolFlag("ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE", enetJNI.ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE_get());
  public final static ENetProtocolFlag ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED = new ENetProtocolFlag("ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED", enetJNI.ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED_get());
  public final static ENetProtocolFlag ENET_PROTOCOL_HEADER_FLAG_COMPRESSED = new ENetProtocolFlag("ENET_PROTOCOL_HEADER_FLAG_COMPRESSED", enetJNI.ENET_PROTOCOL_HEADER_FLAG_COMPRESSED_get());
  public final static ENetProtocolFlag ENET_PROTOCOL_HEADER_FLAG_SENT_TIME = new ENetProtocolFlag("ENET_PROTOCOL_HEADER_FLAG_SENT_TIME", enetJNI.ENET_PROTOCOL_HEADER_FLAG_SENT_TIME_get());
  public final static ENetProtocolFlag ENET_PROTOCOL_HEADER_FLAG_MASK = new ENetProtocolFlag("ENET_PROTOCOL_HEADER_FLAG_MASK", enetJNI.ENET_PROTOCOL_HEADER_FLAG_MASK_get());
  public final static ENetProtocolFlag ENET_PROTOCOL_HEADER_SESSION_MASK = new ENetProtocolFlag("ENET_PROTOCOL_HEADER_SESSION_MASK", enetJNI.ENET_PROTOCOL_HEADER_SESSION_MASK_get());
  public final static ENetProtocolFlag ENET_PROTOCOL_HEADER_SESSION_SHIFT = new ENetProtocolFlag("ENET_PROTOCOL_HEADER_SESSION_SHIFT", enetJNI.ENET_PROTOCOL_HEADER_SESSION_SHIFT_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static ENetProtocolFlag swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + ENetProtocolFlag.class + " with value " + swigValue);
  }

  private ENetProtocolFlag(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private ENetProtocolFlag(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private ENetProtocolFlag(String swigName, ENetProtocolFlag swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static ENetProtocolFlag[] swigValues = { ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE, ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED, ENET_PROTOCOL_HEADER_FLAG_COMPRESSED, ENET_PROTOCOL_HEADER_FLAG_SENT_TIME, ENET_PROTOCOL_HEADER_FLAG_MASK, ENET_PROTOCOL_HEADER_SESSION_MASK, ENET_PROTOCOL_HEADER_SESSION_SHIFT };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

