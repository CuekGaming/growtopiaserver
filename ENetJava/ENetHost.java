/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ENetJava;

public class ENetHost {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ENetHost(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ENetHost obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        enetJNI.delete_ENetHost(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setSocket(int value) {
    enetJNI.ENetHost_socket_set(swigCPtr, this, value);
  }

  public int getSocket() {
    return enetJNI.ENetHost_socket_get(swigCPtr, this);
  }

  public void setAddress(ENetAddress value) {
    enetJNI.ENetHost_address_set(swigCPtr, this, ENetAddress.getCPtr(value), value);
  }

  public ENetAddress getAddress() {
    long cPtr = enetJNI.ENetHost_address_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ENetAddress(cPtr, false);
  }

  public void setIncomingBandwidth(long value) {
    enetJNI.ENetHost_incomingBandwidth_set(swigCPtr, this, value);
  }

  public long getIncomingBandwidth() {
    return enetJNI.ENetHost_incomingBandwidth_get(swigCPtr, this);
  }

  public void setOutgoingBandwidth(long value) {
    enetJNI.ENetHost_outgoingBandwidth_set(swigCPtr, this, value);
  }

  public long getOutgoingBandwidth() {
    return enetJNI.ENetHost_outgoingBandwidth_get(swigCPtr, this);
  }

  public void setBandwidthThrottleEpoch(long value) {
    enetJNI.ENetHost_bandwidthThrottleEpoch_set(swigCPtr, this, value);
  }

  public long getBandwidthThrottleEpoch() {
    return enetJNI.ENetHost_bandwidthThrottleEpoch_get(swigCPtr, this);
  }

  public void setMtu(long value) {
    enetJNI.ENetHost_mtu_set(swigCPtr, this, value);
  }

  public long getMtu() {
    return enetJNI.ENetHost_mtu_get(swigCPtr, this);
  }

  public void setRandomSeed(long value) {
    enetJNI.ENetHost_randomSeed_set(swigCPtr, this, value);
  }

  public long getRandomSeed() {
    return enetJNI.ENetHost_randomSeed_get(swigCPtr, this);
  }

  public void setRecalculateBandwidthLimits(int value) {
    enetJNI.ENetHost_recalculateBandwidthLimits_set(swigCPtr, this, value);
  }

  public int getRecalculateBandwidthLimits() {
    return enetJNI.ENetHost_recalculateBandwidthLimits_get(swigCPtr, this);
  }

  public void setPeers(ENetPeer value) {
    enetJNI.ENetHost_peers_set(swigCPtr, this, ENetPeer.getCPtr(value), value);
  }

  public ENetPeer getPeers() {
    long cPtr = enetJNI.ENetHost_peers_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ENetPeer(cPtr, false);
  }

  public void setPeerCount(long value) {
    enetJNI.ENetHost_peerCount_set(swigCPtr, this, value);
  }

  public long getPeerCount() {
    return enetJNI.ENetHost_peerCount_get(swigCPtr, this);
  }

  public void setChannelLimit(long value) {
    enetJNI.ENetHost_channelLimit_set(swigCPtr, this, value);
  }

  public long getChannelLimit() {
    return enetJNI.ENetHost_channelLimit_get(swigCPtr, this);
  }

  public void setServiceTime(long value) {
    enetJNI.ENetHost_serviceTime_set(swigCPtr, this, value);
  }

  public long getServiceTime() {
    return enetJNI.ENetHost_serviceTime_get(swigCPtr, this);
  }

  public void setDispatchQueue(ENetList value) {
    enetJNI.ENetHost_dispatchQueue_set(swigCPtr, this, ENetList.getCPtr(value), value);
  }

  public ENetList getDispatchQueue() {
    long cPtr = enetJNI.ENetHost_dispatchQueue_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ENetList(cPtr, false);
  }

  public void setContinueSending(int value) {
    enetJNI.ENetHost_continueSending_set(swigCPtr, this, value);
  }

  public int getContinueSending() {
    return enetJNI.ENetHost_continueSending_get(swigCPtr, this);
  }

  public void setPacketSize(long value) {
    enetJNI.ENetHost_packetSize_set(swigCPtr, this, value);
  }

  public long getPacketSize() {
    return enetJNI.ENetHost_packetSize_get(swigCPtr, this);
  }

  public void setHeaderFlags(int value) {
    enetJNI.ENetHost_headerFlags_set(swigCPtr, this, value);
  }

  public int getHeaderFlags() {
    return enetJNI.ENetHost_headerFlags_get(swigCPtr, this);
  }

  public void setCommands(ENetProtocol value) {
    enetJNI.ENetHost_commands_set(swigCPtr, this, ENetProtocol.getCPtr(value), value);
  }

  public ENetProtocol getCommands() {
    long cPtr = enetJNI.ENetHost_commands_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ENetProtocol(cPtr, false);
  }

  public void setCommandCount(long value) {
    enetJNI.ENetHost_commandCount_set(swigCPtr, this, value);
  }

  public long getCommandCount() {
    return enetJNI.ENetHost_commandCount_get(swigCPtr, this);
  }

  public void setBuffers(ENetBuffer value) {
    enetJNI.ENetHost_buffers_set(swigCPtr, this, ENetBuffer.getCPtr(value), value);
  }

  public ENetBuffer getBuffers() {
    long cPtr = enetJNI.ENetHost_buffers_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ENetBuffer(cPtr, false);
  }

  public void setBufferCount(long value) {
    enetJNI.ENetHost_bufferCount_set(swigCPtr, this, value);
  }

  public long getBufferCount() {
    return enetJNI.ENetHost_bufferCount_get(swigCPtr, this);
  }

  public void setChecksum(SWIGTYPE_p_f_p_q_const__ENetBuffer_size_t__unsigned_int value) {
    enetJNI.ENetHost_checksum_set(swigCPtr, this, SWIGTYPE_p_f_p_q_const__ENetBuffer_size_t__unsigned_int.getCPtr(value));
  }

  public SWIGTYPE_p_f_p_q_const__ENetBuffer_size_t__unsigned_int getChecksum() {
    long cPtr = enetJNI.ENetHost_checksum_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__ENetBuffer_size_t__unsigned_int(cPtr, false);
  }

  public void setCompressor(ENetCompressor value) {
    enetJNI.ENetHost_compressor_set(swigCPtr, this, ENetCompressor.getCPtr(value), value);
  }

  public ENetCompressor getCompressor() {
    long cPtr = enetJNI.ENetHost_compressor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ENetCompressor(cPtr, false);
  }

  public void setPacketData(SWIGTYPE_p_a_ENET_PROTOCOL_MAXIMUM_MTU__unsigned_char value) {
    enetJNI.ENetHost_packetData_set(swigCPtr, this, SWIGTYPE_p_a_ENET_PROTOCOL_MAXIMUM_MTU__unsigned_char.getCPtr(value));
  }

  public SWIGTYPE_p_a_ENET_PROTOCOL_MAXIMUM_MTU__unsigned_char getPacketData() {
    long cPtr = enetJNI.ENetHost_packetData_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_a_ENET_PROTOCOL_MAXIMUM_MTU__unsigned_char(cPtr, false);
  }

  public void setReceivedAddress(ENetAddress value) {
    enetJNI.ENetHost_receivedAddress_set(swigCPtr, this, ENetAddress.getCPtr(value), value);
  }

  public ENetAddress getReceivedAddress() {
    long cPtr = enetJNI.ENetHost_receivedAddress_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ENetAddress(cPtr, false);
  }

  public void setReceivedData(SWIGTYPE_p_unsigned_char value) {
    enetJNI.ENetHost_receivedData_set(swigCPtr, this, SWIGTYPE_p_unsigned_char.getCPtr(value));
  }

  public SWIGTYPE_p_unsigned_char getReceivedData() {
    long cPtr = enetJNI.ENetHost_receivedData_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public void setReceivedDataLength(long value) {
    enetJNI.ENetHost_receivedDataLength_set(swigCPtr, this, value);
  }

  public long getReceivedDataLength() {
    return enetJNI.ENetHost_receivedDataLength_get(swigCPtr, this);
  }

  public void setTotalSentData(long value) {
    enetJNI.ENetHost_totalSentData_set(swigCPtr, this, value);
  }

  public long getTotalSentData() {
    return enetJNI.ENetHost_totalSentData_get(swigCPtr, this);
  }

  public void setTotalSentPackets(long value) {
    enetJNI.ENetHost_totalSentPackets_set(swigCPtr, this, value);
  }

  public long getTotalSentPackets() {
    return enetJNI.ENetHost_totalSentPackets_get(swigCPtr, this);
  }

  public void setTotalReceivedData(long value) {
    enetJNI.ENetHost_totalReceivedData_set(swigCPtr, this, value);
  }

  public long getTotalReceivedData() {
    return enetJNI.ENetHost_totalReceivedData_get(swigCPtr, this);
  }

  public void setTotalReceivedPackets(long value) {
    enetJNI.ENetHost_totalReceivedPackets_set(swigCPtr, this, value);
  }

  public long getTotalReceivedPackets() {
    return enetJNI.ENetHost_totalReceivedPackets_get(swigCPtr, this);
  }

  public void setIntercept(SWIGTYPE_p_f_p_struct__ENetHost_p_struct__ENetEvent__int value) {
    enetJNI.ENetHost_intercept_set(swigCPtr, this, SWIGTYPE_p_f_p_struct__ENetHost_p_struct__ENetEvent__int.getCPtr(value));
  }

  public SWIGTYPE_p_f_p_struct__ENetHost_p_struct__ENetEvent__int getIntercept() {
    long cPtr = enetJNI.ENetHost_intercept_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_struct__ENetHost_p_struct__ENetEvent__int(cPtr, false);
  }

  public void setConnectedPeers(long value) {
    enetJNI.ENetHost_connectedPeers_set(swigCPtr, this, value);
  }

  public long getConnectedPeers() {
    return enetJNI.ENetHost_connectedPeers_get(swigCPtr, this);
  }

  public void setBandwidthLimitedPeers(long value) {
    enetJNI.ENetHost_bandwidthLimitedPeers_set(swigCPtr, this, value);
  }

  public long getBandwidthLimitedPeers() {
    return enetJNI.ENetHost_bandwidthLimitedPeers_get(swigCPtr, this);
  }

  public void setDuplicatePeers(long value) {
    enetJNI.ENetHost_duplicatePeers_set(swigCPtr, this, value);
  }

  public long getDuplicatePeers() {
    return enetJNI.ENetHost_duplicatePeers_get(swigCPtr, this);
  }

  public void setMaximumPacketSize(long value) {
    enetJNI.ENetHost_maximumPacketSize_set(swigCPtr, this, value);
  }

  public long getMaximumPacketSize() {
    return enetJNI.ENetHost_maximumPacketSize_get(swigCPtr, this);
  }

  public void setMaximumWaitingData(long value) {
    enetJNI.ENetHost_maximumWaitingData_set(swigCPtr, this, value);
  }

  public long getMaximumWaitingData() {
    return enetJNI.ENetHost_maximumWaitingData_get(swigCPtr, this);
  }

  public ENetHost() {
    this(enetJNI.new_ENetHost(), true);
  }

}
